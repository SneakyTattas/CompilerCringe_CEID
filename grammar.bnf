 BNF Grammar for Compiler Cringe

<nonzero> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"   /* digit without 0 */
<digit> ::= "0" | <nonzero>                                         /* all digits */
<digits> ::= <digit> | <digit> <digits>                             /* multiple digit numbers */
<natural> ::= <digit> | <nonzero> <digits>                          /* natural numbers, evading numbers starting with 0, ex. 076 */

<letter> ::=    "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" |
                "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" |
                "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | 
                "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

<symbol> ::=    "|" | " " | "`" | "~" | "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "(" | ")" | 
                "-" | "_" | "=" | "+" | "[" | "]" | "{" | "}" | ";" | ":" | "<" | ">" | "," | "." |
                "/" | "?"

/* case handling for print, comments etc */
<char> ::= <letter> | <digit> | <symbol>
<char1> ::= <char> | "'"
<char2> ::= <char> | "\""
<text1> ::= "" | <char1> <text1>                                    /* text1 is for double quotes */
<text2> ::= "" | <char2> <text2>                                    /* text2 is for single quotes */
<literal> ::= "\"" <text1> "\"" | "'" <text2> "'"
<commentText> ::= <text1> | <text2>

/* escape sequences, whitespace and comments*/
<escape_sequence> ::= <tab> | <newline> | <backslash>
<tab> ::= "\t"
<newline> ::= "\n"
<carriageReturn> ::= "\r"
<backslash> ::= "\\"

<newlines> ::= <newline> | <newline> <newlines>

FIXME maybe whitespace doesnt work
<whitespace> ::= "" | " " <whitespace> | <comment> | <tab> | <newline> | <carriageReturn>

<comment> ::= <slComment> | <mlComment>
<slComment> ::= "%" <commentText> <newline>
<mlComment> ::= "/*" <commentText> "*/"

/* variable dog */
<firstChar> ::= <letter> | "_"
<otherChar> ::= <letter> | <digit> | "_"
<string> ::= <otherChar> | <otherChar> <otherChar>

/* used for both variable names and function names */
<identifier> ::= <firstChar> | <firstChar> <string>                 /* for bison: [a-zA-Z] [a-zA-Z0-9_]* */
<array> ::= <identifier> "[" <natural> "]"

<variable> ::= <identifier> | <array>
<variables> ::= <variable> | <variable> "," <variables> 

<varType> ::= "CHAR" | "INTEGER"
<varDeclaration> ::= "VARS" <varType> <variables> 


/*enforcing order of operations (better read from bottom to top) */
<Expression> ::= <andExpression> | <Expression> "OR" <andExpression> /* OR expression and final */

<andExpression> ::= <comparison> | <andExpression> "AND" <comparison> /* AND expression */

<comparison> ::= <addition> | <comparison> ">" <addition> | <comparison> "<" <addition> | <comparison> "==" <addition> | <comparison> "!=" <addition> /* logikes ekfraseis */

<addition> ::= <multiplication> | <addition> "+" <multiplication> | <addition> "-" <multiplication> /* teleutaia arithmitiki prosthafaireseis */

<multiplication> ::= <negation> | <multiplication> "*" <negation> | <multiplication> "/" <negation> /* meta polmoi kai diaireseis */

<negation> ::= <power> | "-" <power> /* meta arnhtikoi (px - 9^2    PROSOXH OXI (-9)^2  ) */

<power> ::= <input> | <power> "^" <input> /* powers first */

<input> ::= <type> | <identifier> | "(" <Expression> ")" | functionCall /* base type or an id, or a full expr or a function */

<type> ::= <natural> | <commentText>  /* 2 base types */


/* function declarations and definitions */

<functionDeclarations> ::= <functionDeclaration> | <functionDeclaration> <functionDeclarations>

<functionDeclaration> ::=   "FUNCTION" <identifier> "(" <parameterDeclarations> ")" <newlines> /* return type is an id */
                                <statements>
                            "RETURN" <identifier> "END_FUNCTION" 
                            | "FUNCTION" <identifier> "(" <parameterDeclarations> ")" <newlines> /* return type is a number */
                                <statements>
                            "RETURN" <natural> "END_FUNCTION" 
                            | "FUNCTION" <identifier> "(" <parameterDeclarations> ")" <newlines> /* return type is a string */
                                <statements>
                            "RETURN" <literal> "END_FUNCTION" 

<parameterDeclarations> ::= <parameter> , <parameterDeclarations> | <parameter> | E
<parameter> ::= <varType> <variable>

<functionCall> ::= <identifier> "(" <variables> ")" | <identifier> "()" /* function call */

/* statements, both simple and nested */
<statement> ::= <simpleStatement> | <nestedStatement> | E  /* E represents a lack of statement */
<statements> ::= <statement> | <statement> <statements>

<simpleStatement> ::= <assignStatement> | <printStatement> | <functionCall> | "BREAK"  /* 1 liner statements */
<assignStatement> ::= <variable> "=" <Expression>  /* variable assignment */

TODO maybe add multiple literals and/or variables
<printStatement> ::= "PRINT(" <literal> "[," <variable> "])" | "PRINT(" <literal> ")"  /* print */


<nestedStatement> ::= <ifStatement> | <whileStatement> | <forStatement> | <switchStatement>

<whileStatement> ::= "WHILE(" <Expression> ")" <statements> "ENDWHILE" /* while statement */

<forStatement> ::= "FOR" <identifier> "=" <Expression> "TO" <Expression> "STEP" <Expression> <statements> "ENDFOR" /* for statement */

/* if statement */
<ifStatement> ::= "IF(" <Expression> ")" "THEN" <statements> <elseIfStatements> "END" "IF"
<elseIfStatements> ::= "ELSEIF(" <Expression> ")" "THEN" <statements> <elseIfStatements> | "ELSE" <statements> | E

/* switch statement */
<switchStatement> ::= "SWITCH(" <Expression> ")" <caseStatements> <defaultStatement> "ENDSWITCH"
<caseStatement> ::= "CASE(" <Expression> "):" <statements> 
<caseStatements> ::= <caseStatement> | <caseStatement> <caseStatements>
<defaultStatement> ::= "DEFAULT:" <statements> | E 


/* program structure */
<program> ::=   "PROGRAM" <identifier> <newlines> <functionDeclarations> <mainBlock> |
                "PROGRAM" <identifier> <newlines> <mainBlock>

<mainBlock> ::= "STARTMAIN" <statements> "ENDMAIN"

TODO structs
