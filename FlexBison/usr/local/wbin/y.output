

Terminals which are not used:

   "end of file"


State 4 contains 8 shift/reduce conflicts.
State 19 contains 8 shift/reduce conflicts and 10 reduce/reduce conflicts.
State 76 contains 8 shift/reduce conflicts.
State 83 contains 8 shift/reduce conflicts.
State 112 contains 8 shift/reduce conflicts.
State 131 contains 8 shift/reduce conflicts.
State 134 contains 8 shift/reduce conflicts.
State 140 contains 8 shift/reduce conflicts.
State 149 contains 8 shift/reduce conflicts.
State 153 contains 8 shift/reduce conflicts.

Grammar
rule 1    program -> "PROGRAM" "identifier" functionDeclarations mainBlock
rule 2    program -> "PROGRAM" "identifier" mainBlock
rule 3    mainBlock -> "STARTMAIN" statements "ENDMAIN"
rule 4    functionDeclarations -> functionDeclaration
rule 5    functionDeclarations -> functionDeclaration functionDeclarations
rule 6    functionDeclaration -> "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "identifier" "END_FUNCTION"
rule 7    functionDeclaration -> "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "natural" "END_FUNCTION"
rule 8    functionDeclaration -> "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "string" "END_FUNCTION"
rule 9    parameterDeclarations -> parameter "," parameterDeclarations
rule 10   parameterDeclarations -> parameter
rule 11   parameterDeclarations ->		/* empty */
rule 12   parameter -> varType variable
rule 13   functionCall -> "identifier" "(" variables ")"
rule 14   functionCall -> "identifier" "(" ")"
rule 15   statements -> statement
rule 16   statements -> statement statements
rule 17   statement -> simpleStatement
rule 18   statement -> nestedStatement
rule 19   statement ->		/* empty */
rule 20   simpleStatement -> assignStatement
rule 21   simpleStatement -> printStatement
rule 22   simpleStatement -> functionCall
rule 23   simpleStatement -> varDeclaration
rule 24   simpleStatement -> "BREAK"
rule 25   assignStatement -> variable " =" expression ";"
rule 26   printStatement -> "PRINT" "(" "string" "[" "," variable "]" ")"
rule 27   printStatement -> "PRINT" "(" "string" ")"
rule 28   nestedStatement -> ifStatement
rule 29   nestedStatement -> whileStatement
rule 30   nestedStatement -> forStatement
rule 31   nestedStatement -> switchStatement
rule 32   whileStatement -> "WHILE" "(" expression ")" statements "ENDWHILE"
rule 33   forStatement -> "FOR" "identifier" " =" expression "TO" expression "STEP" expression statements "ENDFOR"
rule 34   ifStatement -> "IF" "(" expression ")" "THEN" statements elseifStatements "ENDIF"
rule 35   elseifStatements -> "ELSEIF" "(" expression ")" "THEN" statements elseifStatements
rule 36   elseifStatements -> "ELSE" statements
rule 37   elseifStatements ->		/* empty */
rule 38   switchStatement -> "SWITCH" "(" expression ")" caseStatements defaultStatement "ENDSWITCH"
rule 39   caseStatements -> caseStatement
rule 40   caseStatements -> caseStatement caseStatements
rule 41   caseStatement -> "CASE" "(" expression ")" ":" statements
rule 42   defaultStatement -> "DEFAULT" ":" statements
rule 43   defaultStatement ->		/* empty */
rule 44   expression -> andExpression
rule 45   expression -> andExpression "OR" expression
rule 46   andExpression -> comparison
rule 47   andExpression -> comparison "AND" andExpression
rule 48   comparison -> addition
rule 49   comparison -> addition "< or >" comparison
rule 50   comparison -> addition "== or !=" comparison
rule 51   addition -> multiplication
rule 52   addition -> multiplication "+ or -" addition
rule 53   multiplication -> negation
rule 54   multiplication -> negation "* or /" multiplication
rule 55   negation -> power
rule 56   negation -> "+ or -" power
rule 57   power -> input
rule 58   power -> input "^" power
rule 59   input -> type
rule 60   input -> "identifier"
rule 61   input -> "(" expression ")"
rule 62   input -> functionCall
rule 63   type -> "natural"
rule 64   type -> "string"
rule 65   varType -> "CHAR"
rule 66   varType -> "INTEGER"
rule 67   array -> "identifier" "[" "natural" "]"
rule 68   variables -> variable
rule 69   variables -> variable "," variables
rule 70   variable -> "identifier"
rule 71   variable -> array
rule 72   varDeclaration -> "VARS" varType variables ";"

Terminals, with rules where they appear

$ (-1)
error (256)
"end of file" (257)
"INTEGER" (258) 66
"CHAR" (259) 65
"PROGRAM" (260) 1 2
"FUNCTION" (261) 6 7 8
"END_FUNCTION" (262) 6 7 8
"VARS" (263) 72
"RETURN" (264) 6 7 8
"STARTMAIN" (265) 3
"ENDMAIN" (266) 3
"WHILE" (267) 32
"ENDWHILE" (268) 32
"FOR" (269) 33
"TO" (270) 33
"STEP" (271) 33
"ENDFOR" (272) 33
"IF" (273) 34
"THEN" (274) 34 35
"ELSEIF" (275) 35
"ELSE" (276) 36
"ENDIF" (277) 34
"SWITCH" (278) 38
"CASE" (279) 41
"DEFAULT" (280) 42
"ENDSWITCH" (281) 38
"PRINT" (282) 26 27
"BREAK" (283) 24
"AND" (284) 47
"OR" (285) 45
"== or !=" (286) 50
"< or >" (287) 49
"+ or -" (288) 52 56
"* or /" (289) 54
"^" (290) 58
"(" (291) 6 7 8 13 14 26 27 32 34 35 38 41 61
")" (292) 6 7 8 13 14 26 27 32 34 35 38 41 61
";" (293) 25 72
"," (294) 9 26 69
" =" (295) 25 33
"[" (296) 26 67
"]" (297) 26 67
":" (298) 41 42
"identifier" (299) 1 2 6 7 8 13 14 33 60 67 70
"natural" (300) 7 63 67
"string" (301) 8 26 27 64

Nonterminals, with rules where they appear

program (48)
    on left: 1 2
mainBlock (49)
    on left: 3, on right: 1 2
functionDeclarations (50)
    on left: 4 5, on right: 1 5
functionDeclaration (51)
    on left: 6 7 8, on right: 4 5
parameterDeclarations (52)
    on left: 9 10 11, on right: 6 7 8 9
parameter (53)
    on left: 12, on right: 9 10
functionCall (54)
    on left: 13 14, on right: 22 62
statements (55)
    on left: 15 16, on right: 3 6 7 8 16 32 33 34 35 36 41 42
statement (56)
    on left: 17 18 19, on right: 15 16
simpleStatement (57)
    on left: 20 21 22 23 24, on right: 17
assignStatement (58)
    on left: 25, on right: 20
printStatement (59)
    on left: 26 27, on right: 21
nestedStatement (60)
    on left: 28 29 30 31, on right: 18
whileStatement (61)
    on left: 32, on right: 29
forStatement (62)
    on left: 33, on right: 30
ifStatement (63)
    on left: 34, on right: 28
elseifStatements (64)
    on left: 35 36 37, on right: 34 35
switchStatement (65)
    on left: 38, on right: 31
caseStatements (66)
    on left: 39 40, on right: 38 40
caseStatement (67)
    on left: 41, on right: 39 40
defaultStatement (68)
    on left: 42 43, on right: 38
expression (69)
    on left: 44 45, on right: 25 32 33 34 35 38 41 45 61
andExpression (70)
    on left: 46 47, on right: 44 45 47
comparison (71)
    on left: 48 49 50, on right: 46 47 49 50
addition (72)
    on left: 51 52, on right: 48 49 50 52
multiplication (73)
    on left: 53 54, on right: 51 52 54
negation (74)
    on left: 55 56, on right: 53 54
power (75)
    on left: 57 58, on right: 55 56 58
input (76)
    on left: 59 60 61 62, on right: 57 58
type (77)
    on left: 63 64, on right: 59
varType (78)
    on left: 65 66, on right: 12 72
array (79)
    on left: 67, on right: 71
variables (80)
    on left: 68 69, on right: 13 69 72
variable (81)
    on left: 70 71, on right: 12 25 26 68 69
varDeclaration (82)
    on left: 72, on right: 23


state 0

    "PROGRAM"	shift, and go to state 1

    program	go to state 156



state 1

    program  ->  "PROGRAM" . "identifier" functionDeclarations mainBlock   (rule 1)
    program  ->  "PROGRAM" . "identifier" mainBlock   (rule 2)

    "identifier"	shift, and go to state 2



state 2

    program  ->  "PROGRAM" "identifier" . functionDeclarations mainBlock   (rule 1)
    program  ->  "PROGRAM" "identifier" . mainBlock   (rule 2)

    "FUNCTION"	shift, and go to state 3
    "STARTMAIN"	shift, and go to state 4

    mainBlock	go to state 5
    functionDeclarations	go to state 6
    functionDeclaration	go to state 7



state 3

    functionDeclaration  ->  "FUNCTION" . "identifier" "(" parameterDeclarations ")" statements "RETURN" "identifier" "END_FUNCTION"   (rule 6)
    functionDeclaration  ->  "FUNCTION" . "identifier" "(" parameterDeclarations ")" statements "RETURN" "natural" "END_FUNCTION"   (rule 7)
    functionDeclaration  ->  "FUNCTION" . "identifier" "(" parameterDeclarations ")" statements "RETURN" "string" "END_FUNCTION"   (rule 8)

    "identifier"	shift, and go to state 8



state 4

    mainBlock  ->  "STARTMAIN" . statements "ENDMAIN"   (rule 3)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    "VARS"	[reduce using rule 19 (statement)]
    "WHILE"	[reduce using rule 19 (statement)]
    "FOR"	[reduce using rule 19 (statement)]
    "IF"	[reduce using rule 19 (statement)]
    "SWITCH"	[reduce using rule 19 (statement)]
    "PRINT"	[reduce using rule 19 (statement)]
    "BREAK"	[reduce using rule 19 (statement)]
    "identifier"	[reduce using rule 19 (statement)]
    $default	reduce using rule 19 (statement)

    functionCall	go to state 17
    statements	go to state 18
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 5

    program  ->  "PROGRAM" "identifier" mainBlock .   (rule 2)

    $default	reduce using rule 2 (program)



state 6

    program  ->  "PROGRAM" "identifier" functionDeclarations . mainBlock   (rule 1)

    "STARTMAIN"	shift, and go to state 4

    mainBlock	go to state 31



state 7

    functionDeclarations  ->  functionDeclaration .   (rule 4)
    functionDeclarations  ->  functionDeclaration . functionDeclarations   (rule 5)

    "FUNCTION"	shift, and go to state 3

    $default	reduce using rule 4 (functionDeclarations)

    functionDeclarations	go to state 32
    functionDeclaration	go to state 7



state 8

    functionDeclaration  ->  "FUNCTION" "identifier" . "(" parameterDeclarations ")" statements "RETURN" "identifier" "END_FUNCTION"   (rule 6)
    functionDeclaration  ->  "FUNCTION" "identifier" . "(" parameterDeclarations ")" statements "RETURN" "natural" "END_FUNCTION"   (rule 7)
    functionDeclaration  ->  "FUNCTION" "identifier" . "(" parameterDeclarations ")" statements "RETURN" "string" "END_FUNCTION"   (rule 8)

    "(" 	shift, and go to state 33



state 9

    varDeclaration  ->  "VARS" . varType variables ";"   (rule 72)

    "INTEGER"	shift, and go to state 34
    "CHAR"	shift, and go to state 35

    varType	go to state 36



state 10

    whileStatement  ->  "WHILE" . "(" expression ")" statements "ENDWHILE"   (rule 32)

    "(" 	shift, and go to state 37



state 11

    forStatement  ->  "FOR" . "identifier" " =" expression "TO" expression "STEP" expression statements "ENDFOR"   (rule 33)

    "identifier"	shift, and go to state 38



state 12

    ifStatement  ->  "IF" . "(" expression ")" "THEN" statements elseifStatements "ENDIF"   (rule 34)

    "(" 	shift, and go to state 39



state 13

    switchStatement  ->  "SWITCH" . "(" expression ")" caseStatements defaultStatement "ENDSWITCH"   (rule 38)

    "(" 	shift, and go to state 40



state 14

    printStatement  ->  "PRINT" . "(" "string" "[" "," variable "]" ")"   (rule 26)
    printStatement  ->  "PRINT" . "(" "string" ")"   (rule 27)

    "(" 	shift, and go to state 41



state 15

    simpleStatement  ->  "BREAK" .   (rule 24)

    $default	reduce using rule 24 (simpleStatement)



state 16

    functionCall  ->  "identifier" . "(" variables ")"   (rule 13)
    functionCall  ->  "identifier" . "(" ")"   (rule 14)
    array  ->  "identifier" . "[" "natural" "]"   (rule 67)
    variable  ->  "identifier" .   (rule 70)

    "(" 	shift, and go to state 42
    "[" 	shift, and go to state 43

    $default	reduce using rule 70 (variable)



state 17

    simpleStatement  ->  functionCall .   (rule 22)

    $default	reduce using rule 22 (simpleStatement)



state 18

    mainBlock  ->  "STARTMAIN" statements . "ENDMAIN"   (rule 3)

    "ENDMAIN"	shift, and go to state 44



state 19

    statements  ->  statement .   (rule 15)
    statements  ->  statement . statements   (rule 16)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    "VARS"	[reduce using rule 19 (statement)]
    "RETURN"	reduce using rule 15 (statements)
    "RETURN"	[reduce using rule 19 (statement)]
    "ENDMAIN"	reduce using rule 15 (statements)
    "ENDMAIN"	[reduce using rule 19 (statement)]
    "WHILE"	[reduce using rule 19 (statement)]
    "ENDWHILE"	reduce using rule 15 (statements)
    "ENDWHILE"	[reduce using rule 19 (statement)]
    "FOR"	[reduce using rule 19 (statement)]
    "ENDFOR"	reduce using rule 15 (statements)
    "ENDFOR"	[reduce using rule 19 (statement)]
    "IF"	[reduce using rule 19 (statement)]
    "ELSEIF"	reduce using rule 15 (statements)
    "ELSEIF"	[reduce using rule 19 (statement)]
    "ELSE"	reduce using rule 15 (statements)
    "ELSE"	[reduce using rule 19 (statement)]
    "ENDIF"	reduce using rule 15 (statements)
    "ENDIF"	[reduce using rule 19 (statement)]
    "SWITCH"	[reduce using rule 19 (statement)]
    "CASE"	reduce using rule 15 (statements)
    "CASE"	[reduce using rule 19 (statement)]
    "DEFAULT"	reduce using rule 15 (statements)
    "DEFAULT"	[reduce using rule 19 (statement)]
    "ENDSWITCH"	reduce using rule 15 (statements)
    "ENDSWITCH"	[reduce using rule 19 (statement)]
    "PRINT"	[reduce using rule 19 (statement)]
    "BREAK"	[reduce using rule 19 (statement)]
    "identifier"	[reduce using rule 19 (statement)]
    $default	reduce using rule 15 (statements)

    functionCall	go to state 17
    statements	go to state 45
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 20

    statement  ->  simpleStatement .   (rule 17)

    $default	reduce using rule 17 (statement)



state 21

    simpleStatement  ->  assignStatement .   (rule 20)

    $default	reduce using rule 20 (simpleStatement)



state 22

    simpleStatement  ->  printStatement .   (rule 21)

    $default	reduce using rule 21 (simpleStatement)



state 23

    statement  ->  nestedStatement .   (rule 18)

    $default	reduce using rule 18 (statement)



state 24

    nestedStatement  ->  whileStatement .   (rule 29)

    $default	reduce using rule 29 (nestedStatement)



state 25

    nestedStatement  ->  forStatement .   (rule 30)

    $default	reduce using rule 30 (nestedStatement)



state 26

    nestedStatement  ->  ifStatement .   (rule 28)

    $default	reduce using rule 28 (nestedStatement)



state 27

    nestedStatement  ->  switchStatement .   (rule 31)

    $default	reduce using rule 31 (nestedStatement)



state 28

    variable  ->  array .   (rule 71)

    $default	reduce using rule 71 (variable)



state 29

    assignStatement  ->  variable . " =" expression ";"   (rule 25)

    " ="	shift, and go to state 46



state 30

    simpleStatement  ->  varDeclaration .   (rule 23)

    $default	reduce using rule 23 (simpleStatement)



state 31

    program  ->  "PROGRAM" "identifier" functionDeclarations mainBlock .   (rule 1)

    $default	reduce using rule 1 (program)



state 32

    functionDeclarations  ->  functionDeclaration functionDeclarations .   (rule 5)

    $default	reduce using rule 5 (functionDeclarations)



state 33

    functionDeclaration  ->  "FUNCTION" "identifier" "(" . parameterDeclarations ")" statements "RETURN" "identifier" "END_FUNCTION"   (rule 6)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" . parameterDeclarations ")" statements "RETURN" "natural" "END_FUNCTION"   (rule 7)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" . parameterDeclarations ")" statements "RETURN" "string" "END_FUNCTION"   (rule 8)

    "INTEGER"	shift, and go to state 34
    "CHAR"	shift, and go to state 35

    $default	reduce using rule 11 (parameterDeclarations)

    parameterDeclarations	go to state 47
    parameter	go to state 48
    varType	go to state 49



state 34

    varType  ->  "INTEGER" .   (rule 66)

    $default	reduce using rule 66 (varType)



state 35

    varType  ->  "CHAR" .   (rule 65)

    $default	reduce using rule 65 (varType)



state 36

    varDeclaration  ->  "VARS" varType . variables ";"   (rule 72)

    "identifier"	shift, and go to state 50

    array	go to state 28
    variables	go to state 51
    variable	go to state 52



state 37

    whileStatement  ->  "WHILE" "(" . expression ")" statements "ENDWHILE"   (rule 32)

    "+ or -"	shift, and go to state 53
    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    expression	go to state 59
    andExpression	go to state 60
    comparison	go to state 61
    addition	go to state 62
    multiplication	go to state 63
    negation	go to state 64
    power	go to state 65
    input	go to state 66
    type	go to state 67



state 38

    forStatement  ->  "FOR" "identifier" . " =" expression "TO" expression "STEP" expression statements "ENDFOR"   (rule 33)

    " ="	shift, and go to state 68



state 39

    ifStatement  ->  "IF" "(" . expression ")" "THEN" statements elseifStatements "ENDIF"   (rule 34)

    "+ or -"	shift, and go to state 53
    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    expression	go to state 69
    andExpression	go to state 60
    comparison	go to state 61
    addition	go to state 62
    multiplication	go to state 63
    negation	go to state 64
    power	go to state 65
    input	go to state 66
    type	go to state 67



state 40

    switchStatement  ->  "SWITCH" "(" . expression ")" caseStatements defaultStatement "ENDSWITCH"   (rule 38)

    "+ or -"	shift, and go to state 53
    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    expression	go to state 70
    andExpression	go to state 60
    comparison	go to state 61
    addition	go to state 62
    multiplication	go to state 63
    negation	go to state 64
    power	go to state 65
    input	go to state 66
    type	go to state 67



state 41

    printStatement  ->  "PRINT" "(" . "string" "[" "," variable "]" ")"   (rule 26)
    printStatement  ->  "PRINT" "(" . "string" ")"   (rule 27)

    "string"	shift, and go to state 71



state 42

    functionCall  ->  "identifier" "(" . variables ")"   (rule 13)
    functionCall  ->  "identifier" "(" . ")"   (rule 14)

    ")" 	shift, and go to state 72
    "identifier"	shift, and go to state 50

    array	go to state 28
    variables	go to state 73
    variable	go to state 52



state 43

    array  ->  "identifier" "[" . "natural" "]"   (rule 67)

    "natural"	shift, and go to state 74



state 44

    mainBlock  ->  "STARTMAIN" statements "ENDMAIN" .   (rule 3)

    $default	reduce using rule 3 (mainBlock)



state 45

    statements  ->  statement statements .   (rule 16)

    $default	reduce using rule 16 (statements)



state 46

    assignStatement  ->  variable " =" . expression ";"   (rule 25)

    "+ or -"	shift, and go to state 53
    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    expression	go to state 75
    andExpression	go to state 60
    comparison	go to state 61
    addition	go to state 62
    multiplication	go to state 63
    negation	go to state 64
    power	go to state 65
    input	go to state 66
    type	go to state 67



state 47

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations . ")" statements "RETURN" "identifier" "END_FUNCTION"   (rule 6)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations . ")" statements "RETURN" "natural" "END_FUNCTION"   (rule 7)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations . ")" statements "RETURN" "string" "END_FUNCTION"   (rule 8)

    ")" 	shift, and go to state 76



state 48

    parameterDeclarations  ->  parameter . "," parameterDeclarations   (rule 9)
    parameterDeclarations  ->  parameter .   (rule 10)

    "," 	shift, and go to state 77

    $default	reduce using rule 10 (parameterDeclarations)



state 49

    parameter  ->  varType . variable   (rule 12)

    "identifier"	shift, and go to state 50

    array	go to state 28
    variable	go to state 78



state 50

    array  ->  "identifier" . "[" "natural" "]"   (rule 67)
    variable  ->  "identifier" .   (rule 70)

    "[" 	shift, and go to state 43

    $default	reduce using rule 70 (variable)



state 51

    varDeclaration  ->  "VARS" varType variables . ";"   (rule 72)

    ";" 	shift, and go to state 79



state 52

    variables  ->  variable .   (rule 68)
    variables  ->  variable . "," variables   (rule 69)

    "," 	shift, and go to state 80

    $default	reduce using rule 68 (variables)



state 53

    negation  ->  "+ or -" . power   (rule 56)

    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    power	go to state 81
    input	go to state 66
    type	go to state 67



state 54

    input  ->  "(" . expression ")"   (rule 61)

    "+ or -"	shift, and go to state 53
    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    expression	go to state 82
    andExpression	go to state 60
    comparison	go to state 61
    addition	go to state 62
    multiplication	go to state 63
    negation	go to state 64
    power	go to state 65
    input	go to state 66
    type	go to state 67



state 55

    functionCall  ->  "identifier" . "(" variables ")"   (rule 13)
    functionCall  ->  "identifier" . "(" ")"   (rule 14)
    input  ->  "identifier" .   (rule 60)

    "(" 	shift, and go to state 42

    $default	reduce using rule 60 (input)



state 56

    type  ->  "natural" .   (rule 63)

    $default	reduce using rule 63 (type)



state 57

    type  ->  "string" .   (rule 64)

    $default	reduce using rule 64 (type)



state 58

    input  ->  functionCall .   (rule 62)

    $default	reduce using rule 62 (input)



state 59

    whileStatement  ->  "WHILE" "(" expression . ")" statements "ENDWHILE"   (rule 32)

    ")" 	shift, and go to state 83



state 60

    expression  ->  andExpression .   (rule 44)
    expression  ->  andExpression . "OR" expression   (rule 45)

    "OR"	shift, and go to state 84

    $default	reduce using rule 44 (expression)



state 61

    andExpression  ->  comparison .   (rule 46)
    andExpression  ->  comparison . "AND" andExpression   (rule 47)

    "AND"	shift, and go to state 85

    $default	reduce using rule 46 (andExpression)



state 62

    comparison  ->  addition .   (rule 48)
    comparison  ->  addition . "< or >" comparison   (rule 49)
    comparison  ->  addition . "== or !=" comparison   (rule 50)

    "== or !="	shift, and go to state 86
    "< or >"	shift, and go to state 87

    $default	reduce using rule 48 (comparison)



state 63

    addition  ->  multiplication .   (rule 51)
    addition  ->  multiplication . "+ or -" addition   (rule 52)

    "+ or -"	shift, and go to state 88

    $default	reduce using rule 51 (addition)



state 64

    multiplication  ->  negation .   (rule 53)
    multiplication  ->  negation . "* or /" multiplication   (rule 54)

    "* or /"	shift, and go to state 89

    $default	reduce using rule 53 (multiplication)



state 65

    negation  ->  power .   (rule 55)

    $default	reduce using rule 55 (negation)



state 66

    power  ->  input .   (rule 57)
    power  ->  input . "^" power   (rule 58)

    "^" 	shift, and go to state 90

    $default	reduce using rule 57 (power)



state 67

    input  ->  type .   (rule 59)

    $default	reduce using rule 59 (input)



state 68

    forStatement  ->  "FOR" "identifier" " =" . expression "TO" expression "STEP" expression statements "ENDFOR"   (rule 33)

    "+ or -"	shift, and go to state 53
    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    expression	go to state 91
    andExpression	go to state 60
    comparison	go to state 61
    addition	go to state 62
    multiplication	go to state 63
    negation	go to state 64
    power	go to state 65
    input	go to state 66
    type	go to state 67



state 69

    ifStatement  ->  "IF" "(" expression . ")" "THEN" statements elseifStatements "ENDIF"   (rule 34)

    ")" 	shift, and go to state 92



state 70

    switchStatement  ->  "SWITCH" "(" expression . ")" caseStatements defaultStatement "ENDSWITCH"   (rule 38)

    ")" 	shift, and go to state 93



state 71

    printStatement  ->  "PRINT" "(" "string" . "[" "," variable "]" ")"   (rule 26)
    printStatement  ->  "PRINT" "(" "string" . ")"   (rule 27)

    ")" 	shift, and go to state 94
    "[" 	shift, and go to state 95



state 72

    functionCall  ->  "identifier" "(" ")" .   (rule 14)

    $default	reduce using rule 14 (functionCall)



state 73

    functionCall  ->  "identifier" "(" variables . ")"   (rule 13)

    ")" 	shift, and go to state 96



state 74

    array  ->  "identifier" "[" "natural" . "]"   (rule 67)

    "]" 	shift, and go to state 97



state 75

    assignStatement  ->  variable " =" expression . ";"   (rule 25)

    ";" 	shift, and go to state 98



state 76

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" . statements "RETURN" "identifier" "END_FUNCTION"   (rule 6)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" . statements "RETURN" "natural" "END_FUNCTION"   (rule 7)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" . statements "RETURN" "string" "END_FUNCTION"   (rule 8)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    "VARS"	[reduce using rule 19 (statement)]
    "WHILE"	[reduce using rule 19 (statement)]
    "FOR"	[reduce using rule 19 (statement)]
    "IF"	[reduce using rule 19 (statement)]
    "SWITCH"	[reduce using rule 19 (statement)]
    "PRINT"	[reduce using rule 19 (statement)]
    "BREAK"	[reduce using rule 19 (statement)]
    "identifier"	[reduce using rule 19 (statement)]
    $default	reduce using rule 19 (statement)

    functionCall	go to state 17
    statements	go to state 99
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 77

    parameterDeclarations  ->  parameter "," . parameterDeclarations   (rule 9)

    "INTEGER"	shift, and go to state 34
    "CHAR"	shift, and go to state 35

    $default	reduce using rule 11 (parameterDeclarations)

    parameterDeclarations	go to state 100
    parameter	go to state 48
    varType	go to state 49



state 78

    parameter  ->  varType variable .   (rule 12)

    $default	reduce using rule 12 (parameter)



state 79

    varDeclaration  ->  "VARS" varType variables ";" .   (rule 72)

    $default	reduce using rule 72 (varDeclaration)



state 80

    variables  ->  variable "," . variables   (rule 69)

    "identifier"	shift, and go to state 50

    array	go to state 28
    variables	go to state 101
    variable	go to state 52



state 81

    negation  ->  "+ or -" power .   (rule 56)

    $default	reduce using rule 56 (negation)



state 82

    input  ->  "(" expression . ")"   (rule 61)

    ")" 	shift, and go to state 102



state 83

    whileStatement  ->  "WHILE" "(" expression ")" . statements "ENDWHILE"   (rule 32)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    "VARS"	[reduce using rule 19 (statement)]
    "WHILE"	[reduce using rule 19 (statement)]
    "FOR"	[reduce using rule 19 (statement)]
    "IF"	[reduce using rule 19 (statement)]
    "SWITCH"	[reduce using rule 19 (statement)]
    "PRINT"	[reduce using rule 19 (statement)]
    "BREAK"	[reduce using rule 19 (statement)]
    "identifier"	[reduce using rule 19 (statement)]
    $default	reduce using rule 19 (statement)

    functionCall	go to state 17
    statements	go to state 103
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 84

    expression  ->  andExpression "OR" . expression   (rule 45)

    "+ or -"	shift, and go to state 53
    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    expression	go to state 104
    andExpression	go to state 60
    comparison	go to state 61
    addition	go to state 62
    multiplication	go to state 63
    negation	go to state 64
    power	go to state 65
    input	go to state 66
    type	go to state 67



state 85

    andExpression  ->  comparison "AND" . andExpression   (rule 47)

    "+ or -"	shift, and go to state 53
    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    andExpression	go to state 105
    comparison	go to state 61
    addition	go to state 62
    multiplication	go to state 63
    negation	go to state 64
    power	go to state 65
    input	go to state 66
    type	go to state 67



state 86

    comparison  ->  addition "== or !=" . comparison   (rule 50)

    "+ or -"	shift, and go to state 53
    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    comparison	go to state 106
    addition	go to state 62
    multiplication	go to state 63
    negation	go to state 64
    power	go to state 65
    input	go to state 66
    type	go to state 67



state 87

    comparison  ->  addition "< or >" . comparison   (rule 49)

    "+ or -"	shift, and go to state 53
    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    comparison	go to state 107
    addition	go to state 62
    multiplication	go to state 63
    negation	go to state 64
    power	go to state 65
    input	go to state 66
    type	go to state 67



state 88

    addition  ->  multiplication "+ or -" . addition   (rule 52)

    "+ or -"	shift, and go to state 53
    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    addition	go to state 108
    multiplication	go to state 63
    negation	go to state 64
    power	go to state 65
    input	go to state 66
    type	go to state 67



state 89

    multiplication  ->  negation "* or /" . multiplication   (rule 54)

    "+ or -"	shift, and go to state 53
    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    multiplication	go to state 109
    negation	go to state 64
    power	go to state 65
    input	go to state 66
    type	go to state 67



state 90

    power  ->  input "^" . power   (rule 58)

    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    power	go to state 110
    input	go to state 66
    type	go to state 67



state 91

    forStatement  ->  "FOR" "identifier" " =" expression . "TO" expression "STEP" expression statements "ENDFOR"   (rule 33)

    "TO"	shift, and go to state 111



state 92

    ifStatement  ->  "IF" "(" expression ")" . "THEN" statements elseifStatements "ENDIF"   (rule 34)

    "THEN"	shift, and go to state 112



state 93

    switchStatement  ->  "SWITCH" "(" expression ")" . caseStatements defaultStatement "ENDSWITCH"   (rule 38)

    "CASE"	shift, and go to state 113

    caseStatements	go to state 114
    caseStatement	go to state 115



state 94

    printStatement  ->  "PRINT" "(" "string" ")" .   (rule 27)

    $default	reduce using rule 27 (printStatement)



state 95

    printStatement  ->  "PRINT" "(" "string" "[" . "," variable "]" ")"   (rule 26)

    "," 	shift, and go to state 116



state 96

    functionCall  ->  "identifier" "(" variables ")" .   (rule 13)

    $default	reduce using rule 13 (functionCall)



state 97

    array  ->  "identifier" "[" "natural" "]" .   (rule 67)

    $default	reduce using rule 67 (array)



state 98

    assignStatement  ->  variable " =" expression ";" .   (rule 25)

    $default	reduce using rule 25 (assignStatement)



state 99

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements . "RETURN" "identifier" "END_FUNCTION"   (rule 6)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements . "RETURN" "natural" "END_FUNCTION"   (rule 7)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements . "RETURN" "string" "END_FUNCTION"   (rule 8)

    "RETURN"	shift, and go to state 117



state 100

    parameterDeclarations  ->  parameter "," parameterDeclarations .   (rule 9)

    $default	reduce using rule 9 (parameterDeclarations)



state 101

    variables  ->  variable "," variables .   (rule 69)

    $default	reduce using rule 69 (variables)



state 102

    input  ->  "(" expression ")" .   (rule 61)

    $default	reduce using rule 61 (input)



state 103

    whileStatement  ->  "WHILE" "(" expression ")" statements . "ENDWHILE"   (rule 32)

    "ENDWHILE"	shift, and go to state 118



state 104

    expression  ->  andExpression "OR" expression .   (rule 45)

    $default	reduce using rule 45 (expression)



state 105

    andExpression  ->  comparison "AND" andExpression .   (rule 47)

    $default	reduce using rule 47 (andExpression)



state 106

    comparison  ->  addition "== or !=" comparison .   (rule 50)

    $default	reduce using rule 50 (comparison)



state 107

    comparison  ->  addition "< or >" comparison .   (rule 49)

    $default	reduce using rule 49 (comparison)



state 108

    addition  ->  multiplication "+ or -" addition .   (rule 52)

    $default	reduce using rule 52 (addition)



state 109

    multiplication  ->  negation "* or /" multiplication .   (rule 54)

    $default	reduce using rule 54 (multiplication)



state 110

    power  ->  input "^" power .   (rule 58)

    $default	reduce using rule 58 (power)



state 111

    forStatement  ->  "FOR" "identifier" " =" expression "TO" . expression "STEP" expression statements "ENDFOR"   (rule 33)

    "+ or -"	shift, and go to state 53
    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    expression	go to state 119
    andExpression	go to state 60
    comparison	go to state 61
    addition	go to state 62
    multiplication	go to state 63
    negation	go to state 64
    power	go to state 65
    input	go to state 66
    type	go to state 67



state 112

    ifStatement  ->  "IF" "(" expression ")" "THEN" . statements elseifStatements "ENDIF"   (rule 34)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    "VARS"	[reduce using rule 19 (statement)]
    "WHILE"	[reduce using rule 19 (statement)]
    "FOR"	[reduce using rule 19 (statement)]
    "IF"	[reduce using rule 19 (statement)]
    "SWITCH"	[reduce using rule 19 (statement)]
    "PRINT"	[reduce using rule 19 (statement)]
    "BREAK"	[reduce using rule 19 (statement)]
    "identifier"	[reduce using rule 19 (statement)]
    $default	reduce using rule 19 (statement)

    functionCall	go to state 17
    statements	go to state 120
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 113

    caseStatement  ->  "CASE" . "(" expression ")" ":" statements   (rule 41)

    "(" 	shift, and go to state 121



state 114

    switchStatement  ->  "SWITCH" "(" expression ")" caseStatements . defaultStatement "ENDSWITCH"   (rule 38)

    "DEFAULT"	shift, and go to state 122

    $default	reduce using rule 43 (defaultStatement)

    defaultStatement	go to state 123



state 115

    caseStatements  ->  caseStatement .   (rule 39)
    caseStatements  ->  caseStatement . caseStatements   (rule 40)

    "CASE"	shift, and go to state 113

    $default	reduce using rule 39 (caseStatements)

    caseStatements	go to state 124
    caseStatement	go to state 115



state 116

    printStatement  ->  "PRINT" "(" "string" "[" "," . variable "]" ")"   (rule 26)

    "identifier"	shift, and go to state 50

    array	go to state 28
    variable	go to state 125



state 117

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" . "identifier" "END_FUNCTION"   (rule 6)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" . "natural" "END_FUNCTION"   (rule 7)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" . "string" "END_FUNCTION"   (rule 8)

    "identifier"	shift, and go to state 126
    "natural"	shift, and go to state 127
    "string"	shift, and go to state 128



state 118

    whileStatement  ->  "WHILE" "(" expression ")" statements "ENDWHILE" .   (rule 32)

    $default	reduce using rule 32 (whileStatement)



state 119

    forStatement  ->  "FOR" "identifier" " =" expression "TO" expression . "STEP" expression statements "ENDFOR"   (rule 33)

    "STEP"	shift, and go to state 129



state 120

    ifStatement  ->  "IF" "(" expression ")" "THEN" statements . elseifStatements "ENDIF"   (rule 34)

    "ELSEIF"	shift, and go to state 130
    "ELSE"	shift, and go to state 131

    $default	reduce using rule 37 (elseifStatements)

    elseifStatements	go to state 132



state 121

    caseStatement  ->  "CASE" "(" . expression ")" ":" statements   (rule 41)

    "+ or -"	shift, and go to state 53
    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    expression	go to state 133
    andExpression	go to state 60
    comparison	go to state 61
    addition	go to state 62
    multiplication	go to state 63
    negation	go to state 64
    power	go to state 65
    input	go to state 66
    type	go to state 67



state 122

    defaultStatement  ->  "DEFAULT" . ":" statements   (rule 42)

    ":" 	shift, and go to state 134



state 123

    switchStatement  ->  "SWITCH" "(" expression ")" caseStatements defaultStatement . "ENDSWITCH"   (rule 38)

    "ENDSWITCH"	shift, and go to state 135



state 124

    caseStatements  ->  caseStatement caseStatements .   (rule 40)

    $default	reduce using rule 40 (caseStatements)



state 125

    printStatement  ->  "PRINT" "(" "string" "[" "," variable . "]" ")"   (rule 26)

    "]" 	shift, and go to state 136



state 126

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "identifier" . "END_FUNCTION"   (rule 6)

    "END_FUNCTION"	shift, and go to state 137



state 127

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "natural" . "END_FUNCTION"   (rule 7)

    "END_FUNCTION"	shift, and go to state 138



state 128

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "string" . "END_FUNCTION"   (rule 8)

    "END_FUNCTION"	shift, and go to state 139



state 129

    forStatement  ->  "FOR" "identifier" " =" expression "TO" expression "STEP" . expression statements "ENDFOR"   (rule 33)

    "+ or -"	shift, and go to state 53
    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    expression	go to state 140
    andExpression	go to state 60
    comparison	go to state 61
    addition	go to state 62
    multiplication	go to state 63
    negation	go to state 64
    power	go to state 65
    input	go to state 66
    type	go to state 67



state 130

    elseifStatements  ->  "ELSEIF" . "(" expression ")" "THEN" statements elseifStatements   (rule 35)

    "(" 	shift, and go to state 141



state 131

    elseifStatements  ->  "ELSE" . statements   (rule 36)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    "VARS"	[reduce using rule 19 (statement)]
    "WHILE"	[reduce using rule 19 (statement)]
    "FOR"	[reduce using rule 19 (statement)]
    "IF"	[reduce using rule 19 (statement)]
    "SWITCH"	[reduce using rule 19 (statement)]
    "PRINT"	[reduce using rule 19 (statement)]
    "BREAK"	[reduce using rule 19 (statement)]
    "identifier"	[reduce using rule 19 (statement)]
    $default	reduce using rule 19 (statement)

    functionCall	go to state 17
    statements	go to state 142
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 132

    ifStatement  ->  "IF" "(" expression ")" "THEN" statements elseifStatements . "ENDIF"   (rule 34)

    "ENDIF"	shift, and go to state 143



state 133

    caseStatement  ->  "CASE" "(" expression . ")" ":" statements   (rule 41)

    ")" 	shift, and go to state 144



state 134

    defaultStatement  ->  "DEFAULT" ":" . statements   (rule 42)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    "VARS"	[reduce using rule 19 (statement)]
    "WHILE"	[reduce using rule 19 (statement)]
    "FOR"	[reduce using rule 19 (statement)]
    "IF"	[reduce using rule 19 (statement)]
    "SWITCH"	[reduce using rule 19 (statement)]
    "PRINT"	[reduce using rule 19 (statement)]
    "BREAK"	[reduce using rule 19 (statement)]
    "identifier"	[reduce using rule 19 (statement)]
    $default	reduce using rule 19 (statement)

    functionCall	go to state 17
    statements	go to state 145
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 135

    switchStatement  ->  "SWITCH" "(" expression ")" caseStatements defaultStatement "ENDSWITCH" .   (rule 38)

    $default	reduce using rule 38 (switchStatement)



state 136

    printStatement  ->  "PRINT" "(" "string" "[" "," variable "]" . ")"   (rule 26)

    ")" 	shift, and go to state 146



state 137

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "identifier" "END_FUNCTION" .   (rule 6)

    $default	reduce using rule 6 (functionDeclaration)



state 138

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "natural" "END_FUNCTION" .   (rule 7)

    $default	reduce using rule 7 (functionDeclaration)



state 139

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "string" "END_FUNCTION" .   (rule 8)

    $default	reduce using rule 8 (functionDeclaration)



state 140

    forStatement  ->  "FOR" "identifier" " =" expression "TO" expression "STEP" expression . statements "ENDFOR"   (rule 33)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    "VARS"	[reduce using rule 19 (statement)]
    "WHILE"	[reduce using rule 19 (statement)]
    "FOR"	[reduce using rule 19 (statement)]
    "IF"	[reduce using rule 19 (statement)]
    "SWITCH"	[reduce using rule 19 (statement)]
    "PRINT"	[reduce using rule 19 (statement)]
    "BREAK"	[reduce using rule 19 (statement)]
    "identifier"	[reduce using rule 19 (statement)]
    $default	reduce using rule 19 (statement)

    functionCall	go to state 17
    statements	go to state 147
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 141

    elseifStatements  ->  "ELSEIF" "(" . expression ")" "THEN" statements elseifStatements   (rule 35)

    "+ or -"	shift, and go to state 53
    "(" 	shift, and go to state 54
    "identifier"	shift, and go to state 55
    "natural"	shift, and go to state 56
    "string"	shift, and go to state 57

    functionCall	go to state 58
    expression	go to state 148
    andExpression	go to state 60
    comparison	go to state 61
    addition	go to state 62
    multiplication	go to state 63
    negation	go to state 64
    power	go to state 65
    input	go to state 66
    type	go to state 67



state 142

    elseifStatements  ->  "ELSE" statements .   (rule 36)

    $default	reduce using rule 36 (elseifStatements)



state 143

    ifStatement  ->  "IF" "(" expression ")" "THEN" statements elseifStatements "ENDIF" .   (rule 34)

    $default	reduce using rule 34 (ifStatement)



state 144

    caseStatement  ->  "CASE" "(" expression ")" . ":" statements   (rule 41)

    ":" 	shift, and go to state 149



state 145

    defaultStatement  ->  "DEFAULT" ":" statements .   (rule 42)

    $default	reduce using rule 42 (defaultStatement)



state 146

    printStatement  ->  "PRINT" "(" "string" "[" "," variable "]" ")" .   (rule 26)

    $default	reduce using rule 26 (printStatement)



state 147

    forStatement  ->  "FOR" "identifier" " =" expression "TO" expression "STEP" expression statements . "ENDFOR"   (rule 33)

    "ENDFOR"	shift, and go to state 150



state 148

    elseifStatements  ->  "ELSEIF" "(" expression . ")" "THEN" statements elseifStatements   (rule 35)

    ")" 	shift, and go to state 151



state 149

    caseStatement  ->  "CASE" "(" expression ")" ":" . statements   (rule 41)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    "VARS"	[reduce using rule 19 (statement)]
    "WHILE"	[reduce using rule 19 (statement)]
    "FOR"	[reduce using rule 19 (statement)]
    "IF"	[reduce using rule 19 (statement)]
    "SWITCH"	[reduce using rule 19 (statement)]
    "PRINT"	[reduce using rule 19 (statement)]
    "BREAK"	[reduce using rule 19 (statement)]
    "identifier"	[reduce using rule 19 (statement)]
    $default	reduce using rule 19 (statement)

    functionCall	go to state 17
    statements	go to state 152
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 150

    forStatement  ->  "FOR" "identifier" " =" expression "TO" expression "STEP" expression statements "ENDFOR" .   (rule 33)

    $default	reduce using rule 33 (forStatement)



state 151

    elseifStatements  ->  "ELSEIF" "(" expression ")" . "THEN" statements elseifStatements   (rule 35)

    "THEN"	shift, and go to state 153



state 152

    caseStatement  ->  "CASE" "(" expression ")" ":" statements .   (rule 41)

    $default	reduce using rule 41 (caseStatement)



state 153

    elseifStatements  ->  "ELSEIF" "(" expression ")" "THEN" . statements elseifStatements   (rule 35)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    "VARS"	[reduce using rule 19 (statement)]
    "WHILE"	[reduce using rule 19 (statement)]
    "FOR"	[reduce using rule 19 (statement)]
    "IF"	[reduce using rule 19 (statement)]
    "SWITCH"	[reduce using rule 19 (statement)]
    "PRINT"	[reduce using rule 19 (statement)]
    "BREAK"	[reduce using rule 19 (statement)]
    "identifier"	[reduce using rule 19 (statement)]
    $default	reduce using rule 19 (statement)

    functionCall	go to state 17
    statements	go to state 154
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 154

    elseifStatements  ->  "ELSEIF" "(" expression ")" "THEN" statements . elseifStatements   (rule 35)

    "ELSEIF"	shift, and go to state 130
    "ELSE"	shift, and go to state 131

    $default	reduce using rule 37 (elseifStatements)

    elseifStatements	go to state 155



state 155

    elseifStatements  ->  "ELSEIF" "(" expression ")" "THEN" statements elseifStatements .   (rule 35)

    $default	reduce using rule 35 (elseifStatements)



state 156

    $   	go to state 157



state 157

    $   	go to state 158



state 158

    $default	accept
