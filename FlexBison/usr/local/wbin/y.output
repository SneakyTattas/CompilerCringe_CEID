Conflict in state 108 between rule 74 and token "," resolved as reduce.

Grammar
rule 1    program -> "PROGRAM" "identifier" functionDeclarations mainBlock T_EOF
rule 2    program -> "PROGRAM" "identifier" mainBlock T_EOF
rule 3    mainBlock -> "STARTMAIN" statements "ENDMAIN"
rule 4    functionDeclarations -> functionDeclaration
rule 5    functionDeclarations -> functionDeclaration functionDeclarations
rule 6    functionDeclaration -> "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "identifier" "END_FUNCTION"
rule 7    functionDeclaration -> "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "natural" "END_FUNCTION"
rule 8    functionDeclaration -> "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "string" "END_FUNCTION"
rule 9    parameterDeclarations -> parameter "," parameterDeclarations
rule 10   parameterDeclarations -> parameter
rule 11   parameterDeclarations ->		/* empty */
rule 12   parameter -> varType variable
rule 13   argumentList -> argument
rule 14   argumentList -> argument "," argumentList
rule 15   argument -> type
rule 16   argument -> variable
rule 17   functionCall -> "identifier" "(" argumentList ")"
rule 18   functionCall -> "identifier" "(" ")"
rule 19   statements -> statement
rule 20   statements -> statement statements
rule 21   statement -> simpleStatement
rule 22   statement -> nestedStatement
rule 23   simpleStatement -> assignStatement
rule 24   simpleStatement -> printStatement
rule 25   simpleStatement -> functionCall
rule 26   simpleStatement -> varDeclaration
rule 27   simpleStatement -> "BREAK"
rule 28   assignStatement -> variable " =" expression ";"
rule 29   printStatement -> "PRINT" "(" "string" "[" "," variable "]" ")"
rule 30   printStatement -> "PRINT" "(" "string" ")"
rule 31   nestedStatement -> ifStatement
rule 32   nestedStatement -> whileStatement
rule 33   nestedStatement -> forStatement
rule 34   nestedStatement -> switchStatement
rule 35   whileStatement -> "WHILE" "(" expression ")" statements "ENDWHILE"
rule 36   forStatement -> "FOR" "identifier" " =" expression "TO" expression "STEP" expression statements "ENDFOR"
rule 37   ifStatement -> "IF" "(" expression ")" "THEN" statements elseifStatements "ENDIF"
rule 38   elseifStatements -> "ELSEIF" "(" expression ")" "THEN" statements elseifStatements
rule 39   elseifStatements -> "ELSE" statements
rule 40   elseifStatements ->		/* empty */
rule 41   switchStatement -> "SWITCH" "(" expression ")" caseStatements defaultStatement "ENDSWITCH"
rule 42   caseStatements -> caseStatement
rule 43   caseStatements -> caseStatement caseStatements
rule 44   caseStatement -> "CASE" "(" expression ")" ":" statements
rule 45   defaultStatement -> "DEFAULT" ":" statements
rule 46   defaultStatement ->		/* empty */
rule 47   expression -> andExpression
rule 48   expression -> andExpression "OR" expression
rule 49   andExpression -> comparison
rule 50   andExpression -> comparison "AND" andExpression
rule 51   comparison -> addition
rule 52   comparison -> addition "< or >" comparison
rule 53   comparison -> addition "== or !=" comparison
rule 54   addition -> multiplication
rule 55   addition -> multiplication "+ or -" addition
rule 56   multiplication -> negation
rule 57   multiplication -> negation "* or /" multiplication
rule 58   negation -> power
rule 59   negation -> "+ or -" power
rule 60   power -> input
rule 61   power -> input "^" power
rule 62   input -> type
rule 63   input -> "identifier"
rule 64   input -> "(" expression ")"
rule 65   input -> functionCall
rule 66   type -> "natural"
rule 67   type -> "string"
rule 68   varType -> "CHAR"
rule 69   varType -> "INTEGER"
rule 70   array -> "identifier" "[" "natural" "]"
rule 71   array -> "identifier" "[" "]"
rule 72   variable -> "identifier"
rule 73   variable -> array
rule 74   variables -> variables "," variables
rule 75   variables -> variable
rule 76   varDeclaration -> "VARS" varType variables ";"

Terminals, with rules where they appear

$ (-1)
error (256)
T_EOF (257) 1 2
"INTEGER" (258) 69
"CHAR" (259) 68
"PROGRAM" (260) 1 2
"FUNCTION" (261) 6 7 8
"END_FUNCTION" (262) 6 7 8
"VARS" (263) 76
"RETURN" (264) 6 7 8
"STARTMAIN" (265) 3
"ENDMAIN" (266) 3
"WHILE" (267) 35
"ENDWHILE" (268) 35
"FOR" (269) 36
"TO" (270) 36
"STEP" (271) 36
"ENDFOR" (272) 36
"IF" (273) 37
"THEN" (274) 37 38
"ELSEIF" (275) 38
"ELSE" (276) 39
"ENDIF" (277) 37
"SWITCH" (278) 41
"CASE" (279) 44
"DEFAULT" (280) 45
"ENDSWITCH" (281) 41
"PRINT" (282) 29 30
"BREAK" (283) 27
"AND" (284) 50
"OR" (285) 48
"== or !=" (286) 53
"< or >" (287) 52
"+ or -" (288) 55 59
"* or /" (289) 57
"^" (290) 61
"(" (291) 6 7 8 17 18 29 30 35 37 38 41 44 64
")" (292) 6 7 8 17 18 29 30 35 37 38 41 44 64
";" (293) 28 76
"," (294) 9 14 29 74
" =" (295) 28 36
"[" (296) 29 70 71
"]" (297) 29 70 71
":" (298) 44 45
"identifier" (299) 1 2 6 7 8 17 18 36 63 70 71 72
"natural" (300) 7 66 70
"string" (301) 8 29 30 67

Nonterminals, with rules where they appear

program (48)
    on left: 1 2
mainBlock (49)
    on left: 3, on right: 1 2
functionDeclarations (50)
    on left: 4 5, on right: 1 5
functionDeclaration (51)
    on left: 6 7 8, on right: 4 5
parameterDeclarations (52)
    on left: 9 10 11, on right: 6 7 8 9
parameter (53)
    on left: 12, on right: 9 10
argumentList (54)
    on left: 13 14, on right: 14 17
argument (55)
    on left: 15 16, on right: 13 14
functionCall (56)
    on left: 17 18, on right: 25 65
statements (57)
    on left: 19 20, on right: 3 6 7 8 20 35 36 37 38 39 44 45
statement (58)
    on left: 21 22, on right: 19 20
simpleStatement (59)
    on left: 23 24 25 26 27, on right: 21
assignStatement (60)
    on left: 28, on right: 23
printStatement (61)
    on left: 29 30, on right: 24
nestedStatement (62)
    on left: 31 32 33 34, on right: 22
whileStatement (63)
    on left: 35, on right: 32
forStatement (64)
    on left: 36, on right: 33
ifStatement (65)
    on left: 37, on right: 31
elseifStatements (66)
    on left: 38 39 40, on right: 37 38
switchStatement (67)
    on left: 41, on right: 34
caseStatements (68)
    on left: 42 43, on right: 41 43
caseStatement (69)
    on left: 44, on right: 42 43
defaultStatement (70)
    on left: 45 46, on right: 41
expression (71)
    on left: 47 48, on right: 28 35 36 37 38 41 44 48 64
andExpression (72)
    on left: 49 50, on right: 47 48 50
comparison (73)
    on left: 51 52 53, on right: 49 50 52 53
addition (74)
    on left: 54 55, on right: 51 52 53 55
multiplication (75)
    on left: 56 57, on right: 54 55 57
negation (76)
    on left: 58 59, on right: 56 57
power (77)
    on left: 60 61, on right: 58 59 61
input (78)
    on left: 62 63 64 65, on right: 60 61
type (79)
    on left: 66 67, on right: 15 62
varType (80)
    on left: 68 69, on right: 12 76
array (81)
    on left: 70 71, on right: 73
variable (82)
    on left: 72 73, on right: 12 16 28 29 75
variables (83)
    on left: 74 75, on right: 74 76
varDeclaration (84)
    on left: 76, on right: 26


state 0

    "PROGRAM"	shift, and go to state 1

    program	go to state 164



state 1

    program  ->  "PROGRAM" . "identifier" functionDeclarations mainBlock T_EOF   (rule 1)
    program  ->  "PROGRAM" . "identifier" mainBlock T_EOF   (rule 2)

    "identifier"	shift, and go to state 2



state 2

    program  ->  "PROGRAM" "identifier" . functionDeclarations mainBlock T_EOF   (rule 1)
    program  ->  "PROGRAM" "identifier" . mainBlock T_EOF   (rule 2)

    "FUNCTION"	shift, and go to state 3
    "STARTMAIN"	shift, and go to state 4

    mainBlock	go to state 5
    functionDeclarations	go to state 6
    functionDeclaration	go to state 7



state 3

    functionDeclaration  ->  "FUNCTION" . "identifier" "(" parameterDeclarations ")" statements "RETURN" "identifier" "END_FUNCTION"   (rule 6)
    functionDeclaration  ->  "FUNCTION" . "identifier" "(" parameterDeclarations ")" statements "RETURN" "natural" "END_FUNCTION"   (rule 7)
    functionDeclaration  ->  "FUNCTION" . "identifier" "(" parameterDeclarations ")" statements "RETURN" "string" "END_FUNCTION"   (rule 8)

    "identifier"	shift, and go to state 8



state 4

    mainBlock  ->  "STARTMAIN" . statements "ENDMAIN"   (rule 3)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    functionCall	go to state 17
    statements	go to state 18
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 5

    program  ->  "PROGRAM" "identifier" mainBlock . T_EOF   (rule 2)

    T_EOF	shift, and go to state 31



state 6

    program  ->  "PROGRAM" "identifier" functionDeclarations . mainBlock T_EOF   (rule 1)

    "STARTMAIN"	shift, and go to state 4

    mainBlock	go to state 32



state 7

    functionDeclarations  ->  functionDeclaration .   (rule 4)
    functionDeclarations  ->  functionDeclaration . functionDeclarations   (rule 5)

    "FUNCTION"	shift, and go to state 3

    $default	reduce using rule 4 (functionDeclarations)

    functionDeclarations	go to state 33
    functionDeclaration	go to state 7



state 8

    functionDeclaration  ->  "FUNCTION" "identifier" . "(" parameterDeclarations ")" statements "RETURN" "identifier" "END_FUNCTION"   (rule 6)
    functionDeclaration  ->  "FUNCTION" "identifier" . "(" parameterDeclarations ")" statements "RETURN" "natural" "END_FUNCTION"   (rule 7)
    functionDeclaration  ->  "FUNCTION" "identifier" . "(" parameterDeclarations ")" statements "RETURN" "string" "END_FUNCTION"   (rule 8)

    "(" 	shift, and go to state 34



state 9

    varDeclaration  ->  "VARS" . varType variables ";"   (rule 76)

    "INTEGER"	shift, and go to state 35
    "CHAR"	shift, and go to state 36

    varType	go to state 37



state 10

    whileStatement  ->  "WHILE" . "(" expression ")" statements "ENDWHILE"   (rule 35)

    "(" 	shift, and go to state 38



state 11

    forStatement  ->  "FOR" . "identifier" " =" expression "TO" expression "STEP" expression statements "ENDFOR"   (rule 36)

    "identifier"	shift, and go to state 39



state 12

    ifStatement  ->  "IF" . "(" expression ")" "THEN" statements elseifStatements "ENDIF"   (rule 37)

    "(" 	shift, and go to state 40



state 13

    switchStatement  ->  "SWITCH" . "(" expression ")" caseStatements defaultStatement "ENDSWITCH"   (rule 41)

    "(" 	shift, and go to state 41



state 14

    printStatement  ->  "PRINT" . "(" "string" "[" "," variable "]" ")"   (rule 29)
    printStatement  ->  "PRINT" . "(" "string" ")"   (rule 30)

    "(" 	shift, and go to state 42



state 15

    simpleStatement  ->  "BREAK" .   (rule 27)

    $default	reduce using rule 27 (simpleStatement)



state 16

    functionCall  ->  "identifier" . "(" argumentList ")"   (rule 17)
    functionCall  ->  "identifier" . "(" ")"   (rule 18)
    array  ->  "identifier" . "[" "natural" "]"   (rule 70)
    array  ->  "identifier" . "[" "]"   (rule 71)
    variable  ->  "identifier" .   (rule 72)

    "(" 	shift, and go to state 43
    "[" 	shift, and go to state 44

    $default	reduce using rule 72 (variable)



state 17

    simpleStatement  ->  functionCall .   (rule 25)

    $default	reduce using rule 25 (simpleStatement)



state 18

    mainBlock  ->  "STARTMAIN" statements . "ENDMAIN"   (rule 3)

    "ENDMAIN"	shift, and go to state 45



state 19

    statements  ->  statement .   (rule 19)
    statements  ->  statement . statements   (rule 20)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    $default	reduce using rule 19 (statements)

    functionCall	go to state 17
    statements	go to state 46
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 20

    statement  ->  simpleStatement .   (rule 21)

    $default	reduce using rule 21 (statement)



state 21

    simpleStatement  ->  assignStatement .   (rule 23)

    $default	reduce using rule 23 (simpleStatement)



state 22

    simpleStatement  ->  printStatement .   (rule 24)

    $default	reduce using rule 24 (simpleStatement)



state 23

    statement  ->  nestedStatement .   (rule 22)

    $default	reduce using rule 22 (statement)



state 24

    nestedStatement  ->  whileStatement .   (rule 32)

    $default	reduce using rule 32 (nestedStatement)



state 25

    nestedStatement  ->  forStatement .   (rule 33)

    $default	reduce using rule 33 (nestedStatement)



state 26

    nestedStatement  ->  ifStatement .   (rule 31)

    $default	reduce using rule 31 (nestedStatement)



state 27

    nestedStatement  ->  switchStatement .   (rule 34)

    $default	reduce using rule 34 (nestedStatement)



state 28

    variable  ->  array .   (rule 73)

    $default	reduce using rule 73 (variable)



state 29

    assignStatement  ->  variable . " =" expression ";"   (rule 28)

    " ="	shift, and go to state 47



state 30

    simpleStatement  ->  varDeclaration .   (rule 26)

    $default	reduce using rule 26 (simpleStatement)



state 31

    program  ->  "PROGRAM" "identifier" mainBlock T_EOF .   (rule 2)

    $default	reduce using rule 2 (program)



state 32

    program  ->  "PROGRAM" "identifier" functionDeclarations mainBlock . T_EOF   (rule 1)

    T_EOF	shift, and go to state 48



state 33

    functionDeclarations  ->  functionDeclaration functionDeclarations .   (rule 5)

    $default	reduce using rule 5 (functionDeclarations)



state 34

    functionDeclaration  ->  "FUNCTION" "identifier" "(" . parameterDeclarations ")" statements "RETURN" "identifier" "END_FUNCTION"   (rule 6)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" . parameterDeclarations ")" statements "RETURN" "natural" "END_FUNCTION"   (rule 7)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" . parameterDeclarations ")" statements "RETURN" "string" "END_FUNCTION"   (rule 8)

    "INTEGER"	shift, and go to state 35
    "CHAR"	shift, and go to state 36

    $default	reduce using rule 11 (parameterDeclarations)

    parameterDeclarations	go to state 49
    parameter	go to state 50
    varType	go to state 51



state 35

    varType  ->  "INTEGER" .   (rule 69)

    $default	reduce using rule 69 (varType)



state 36

    varType  ->  "CHAR" .   (rule 68)

    $default	reduce using rule 68 (varType)



state 37

    varDeclaration  ->  "VARS" varType . variables ";"   (rule 76)

    "identifier"	shift, and go to state 52

    array	go to state 28
    variable	go to state 53
    variables	go to state 54



state 38

    whileStatement  ->  "WHILE" "(" . expression ")" statements "ENDWHILE"   (rule 35)

    "+ or -"	shift, and go to state 55
    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    expression	go to state 61
    andExpression	go to state 62
    comparison	go to state 63
    addition	go to state 64
    multiplication	go to state 65
    negation	go to state 66
    power	go to state 67
    input	go to state 68
    type	go to state 69



state 39

    forStatement  ->  "FOR" "identifier" . " =" expression "TO" expression "STEP" expression statements "ENDFOR"   (rule 36)

    " ="	shift, and go to state 70



state 40

    ifStatement  ->  "IF" "(" . expression ")" "THEN" statements elseifStatements "ENDIF"   (rule 37)

    "+ or -"	shift, and go to state 55
    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    expression	go to state 71
    andExpression	go to state 62
    comparison	go to state 63
    addition	go to state 64
    multiplication	go to state 65
    negation	go to state 66
    power	go to state 67
    input	go to state 68
    type	go to state 69



state 41

    switchStatement  ->  "SWITCH" "(" . expression ")" caseStatements defaultStatement "ENDSWITCH"   (rule 41)

    "+ or -"	shift, and go to state 55
    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    expression	go to state 72
    andExpression	go to state 62
    comparison	go to state 63
    addition	go to state 64
    multiplication	go to state 65
    negation	go to state 66
    power	go to state 67
    input	go to state 68
    type	go to state 69



state 42

    printStatement  ->  "PRINT" "(" . "string" "[" "," variable "]" ")"   (rule 29)
    printStatement  ->  "PRINT" "(" . "string" ")"   (rule 30)

    "string"	shift, and go to state 73



state 43

    functionCall  ->  "identifier" "(" . argumentList ")"   (rule 17)
    functionCall  ->  "identifier" "(" . ")"   (rule 18)

    ")" 	shift, and go to state 74
    "identifier"	shift, and go to state 52
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    argumentList	go to state 75
    argument	go to state 76
    type	go to state 77
    array	go to state 28
    variable	go to state 78



state 44

    array  ->  "identifier" "[" . "natural" "]"   (rule 70)
    array  ->  "identifier" "[" . "]"   (rule 71)

    "]" 	shift, and go to state 79
    "natural"	shift, and go to state 80



state 45

    mainBlock  ->  "STARTMAIN" statements "ENDMAIN" .   (rule 3)

    $default	reduce using rule 3 (mainBlock)



state 46

    statements  ->  statement statements .   (rule 20)

    $default	reduce using rule 20 (statements)



state 47

    assignStatement  ->  variable " =" . expression ";"   (rule 28)

    "+ or -"	shift, and go to state 55
    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    expression	go to state 81
    andExpression	go to state 62
    comparison	go to state 63
    addition	go to state 64
    multiplication	go to state 65
    negation	go to state 66
    power	go to state 67
    input	go to state 68
    type	go to state 69



state 48

    program  ->  "PROGRAM" "identifier" functionDeclarations mainBlock T_EOF .   (rule 1)

    $default	reduce using rule 1 (program)



state 49

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations . ")" statements "RETURN" "identifier" "END_FUNCTION"   (rule 6)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations . ")" statements "RETURN" "natural" "END_FUNCTION"   (rule 7)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations . ")" statements "RETURN" "string" "END_FUNCTION"   (rule 8)

    ")" 	shift, and go to state 82



state 50

    parameterDeclarations  ->  parameter . "," parameterDeclarations   (rule 9)
    parameterDeclarations  ->  parameter .   (rule 10)

    "," 	shift, and go to state 83

    $default	reduce using rule 10 (parameterDeclarations)



state 51

    parameter  ->  varType . variable   (rule 12)

    "identifier"	shift, and go to state 52

    array	go to state 28
    variable	go to state 84



state 52

    array  ->  "identifier" . "[" "natural" "]"   (rule 70)
    array  ->  "identifier" . "[" "]"   (rule 71)
    variable  ->  "identifier" .   (rule 72)

    "[" 	shift, and go to state 44

    $default	reduce using rule 72 (variable)



state 53

    variables  ->  variable .   (rule 75)

    $default	reduce using rule 75 (variables)



state 54

    variables  ->  variables . "," variables   (rule 74)
    varDeclaration  ->  "VARS" varType variables . ";"   (rule 76)

    ";" 	shift, and go to state 85
    "," 	shift, and go to state 86



state 55

    negation  ->  "+ or -" . power   (rule 59)

    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    power	go to state 87
    input	go to state 68
    type	go to state 69



state 56

    input  ->  "(" . expression ")"   (rule 64)

    "+ or -"	shift, and go to state 55
    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    expression	go to state 88
    andExpression	go to state 62
    comparison	go to state 63
    addition	go to state 64
    multiplication	go to state 65
    negation	go to state 66
    power	go to state 67
    input	go to state 68
    type	go to state 69



state 57

    functionCall  ->  "identifier" . "(" argumentList ")"   (rule 17)
    functionCall  ->  "identifier" . "(" ")"   (rule 18)
    input  ->  "identifier" .   (rule 63)

    "(" 	shift, and go to state 43

    $default	reduce using rule 63 (input)



state 58

    type  ->  "natural" .   (rule 66)

    $default	reduce using rule 66 (type)



state 59

    type  ->  "string" .   (rule 67)

    $default	reduce using rule 67 (type)



state 60

    input  ->  functionCall .   (rule 65)

    $default	reduce using rule 65 (input)



state 61

    whileStatement  ->  "WHILE" "(" expression . ")" statements "ENDWHILE"   (rule 35)

    ")" 	shift, and go to state 89



state 62

    expression  ->  andExpression .   (rule 47)
    expression  ->  andExpression . "OR" expression   (rule 48)

    "OR"	shift, and go to state 90

    $default	reduce using rule 47 (expression)



state 63

    andExpression  ->  comparison .   (rule 49)
    andExpression  ->  comparison . "AND" andExpression   (rule 50)

    "AND"	shift, and go to state 91

    $default	reduce using rule 49 (andExpression)



state 64

    comparison  ->  addition .   (rule 51)
    comparison  ->  addition . "< or >" comparison   (rule 52)
    comparison  ->  addition . "== or !=" comparison   (rule 53)

    "== or !="	shift, and go to state 92
    "< or >"	shift, and go to state 93

    $default	reduce using rule 51 (comparison)



state 65

    addition  ->  multiplication .   (rule 54)
    addition  ->  multiplication . "+ or -" addition   (rule 55)

    "+ or -"	shift, and go to state 94

    $default	reduce using rule 54 (addition)



state 66

    multiplication  ->  negation .   (rule 56)
    multiplication  ->  negation . "* or /" multiplication   (rule 57)

    "* or /"	shift, and go to state 95

    $default	reduce using rule 56 (multiplication)



state 67

    negation  ->  power .   (rule 58)

    $default	reduce using rule 58 (negation)



state 68

    power  ->  input .   (rule 60)
    power  ->  input . "^" power   (rule 61)

    "^" 	shift, and go to state 96

    $default	reduce using rule 60 (power)



state 69

    input  ->  type .   (rule 62)

    $default	reduce using rule 62 (input)



state 70

    forStatement  ->  "FOR" "identifier" " =" . expression "TO" expression "STEP" expression statements "ENDFOR"   (rule 36)

    "+ or -"	shift, and go to state 55
    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    expression	go to state 97
    andExpression	go to state 62
    comparison	go to state 63
    addition	go to state 64
    multiplication	go to state 65
    negation	go to state 66
    power	go to state 67
    input	go to state 68
    type	go to state 69



state 71

    ifStatement  ->  "IF" "(" expression . ")" "THEN" statements elseifStatements "ENDIF"   (rule 37)

    ")" 	shift, and go to state 98



state 72

    switchStatement  ->  "SWITCH" "(" expression . ")" caseStatements defaultStatement "ENDSWITCH"   (rule 41)

    ")" 	shift, and go to state 99



state 73

    printStatement  ->  "PRINT" "(" "string" . "[" "," variable "]" ")"   (rule 29)
    printStatement  ->  "PRINT" "(" "string" . ")"   (rule 30)

    ")" 	shift, and go to state 100
    "[" 	shift, and go to state 101



state 74

    functionCall  ->  "identifier" "(" ")" .   (rule 18)

    $default	reduce using rule 18 (functionCall)



state 75

    functionCall  ->  "identifier" "(" argumentList . ")"   (rule 17)

    ")" 	shift, and go to state 102



state 76

    argumentList  ->  argument .   (rule 13)
    argumentList  ->  argument . "," argumentList   (rule 14)

    "," 	shift, and go to state 103

    $default	reduce using rule 13 (argumentList)



state 77

    argument  ->  type .   (rule 15)

    $default	reduce using rule 15 (argument)



state 78

    argument  ->  variable .   (rule 16)

    $default	reduce using rule 16 (argument)



state 79

    array  ->  "identifier" "[" "]" .   (rule 71)

    $default	reduce using rule 71 (array)



state 80

    array  ->  "identifier" "[" "natural" . "]"   (rule 70)

    "]" 	shift, and go to state 104



state 81

    assignStatement  ->  variable " =" expression . ";"   (rule 28)

    ";" 	shift, and go to state 105



state 82

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" . statements "RETURN" "identifier" "END_FUNCTION"   (rule 6)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" . statements "RETURN" "natural" "END_FUNCTION"   (rule 7)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" . statements "RETURN" "string" "END_FUNCTION"   (rule 8)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    functionCall	go to state 17
    statements	go to state 106
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 83

    parameterDeclarations  ->  parameter "," . parameterDeclarations   (rule 9)

    "INTEGER"	shift, and go to state 35
    "CHAR"	shift, and go to state 36

    $default	reduce using rule 11 (parameterDeclarations)

    parameterDeclarations	go to state 107
    parameter	go to state 50
    varType	go to state 51



state 84

    parameter  ->  varType variable .   (rule 12)

    $default	reduce using rule 12 (parameter)



state 85

    varDeclaration  ->  "VARS" varType variables ";" .   (rule 76)

    $default	reduce using rule 76 (varDeclaration)



state 86

    variables  ->  variables "," . variables   (rule 74)

    "identifier"	shift, and go to state 52

    array	go to state 28
    variable	go to state 53
    variables	go to state 108



state 87

    negation  ->  "+ or -" power .   (rule 59)

    $default	reduce using rule 59 (negation)



state 88

    input  ->  "(" expression . ")"   (rule 64)

    ")" 	shift, and go to state 109



state 89

    whileStatement  ->  "WHILE" "(" expression ")" . statements "ENDWHILE"   (rule 35)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    functionCall	go to state 17
    statements	go to state 110
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 90

    expression  ->  andExpression "OR" . expression   (rule 48)

    "+ or -"	shift, and go to state 55
    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    expression	go to state 111
    andExpression	go to state 62
    comparison	go to state 63
    addition	go to state 64
    multiplication	go to state 65
    negation	go to state 66
    power	go to state 67
    input	go to state 68
    type	go to state 69



state 91

    andExpression  ->  comparison "AND" . andExpression   (rule 50)

    "+ or -"	shift, and go to state 55
    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    andExpression	go to state 112
    comparison	go to state 63
    addition	go to state 64
    multiplication	go to state 65
    negation	go to state 66
    power	go to state 67
    input	go to state 68
    type	go to state 69



state 92

    comparison  ->  addition "== or !=" . comparison   (rule 53)

    "+ or -"	shift, and go to state 55
    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    comparison	go to state 113
    addition	go to state 64
    multiplication	go to state 65
    negation	go to state 66
    power	go to state 67
    input	go to state 68
    type	go to state 69



state 93

    comparison  ->  addition "< or >" . comparison   (rule 52)

    "+ or -"	shift, and go to state 55
    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    comparison	go to state 114
    addition	go to state 64
    multiplication	go to state 65
    negation	go to state 66
    power	go to state 67
    input	go to state 68
    type	go to state 69



state 94

    addition  ->  multiplication "+ or -" . addition   (rule 55)

    "+ or -"	shift, and go to state 55
    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    addition	go to state 115
    multiplication	go to state 65
    negation	go to state 66
    power	go to state 67
    input	go to state 68
    type	go to state 69



state 95

    multiplication  ->  negation "* or /" . multiplication   (rule 57)

    "+ or -"	shift, and go to state 55
    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    multiplication	go to state 116
    negation	go to state 66
    power	go to state 67
    input	go to state 68
    type	go to state 69



state 96

    power  ->  input "^" . power   (rule 61)

    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    power	go to state 117
    input	go to state 68
    type	go to state 69



state 97

    forStatement  ->  "FOR" "identifier" " =" expression . "TO" expression "STEP" expression statements "ENDFOR"   (rule 36)

    "TO"	shift, and go to state 118



state 98

    ifStatement  ->  "IF" "(" expression ")" . "THEN" statements elseifStatements "ENDIF"   (rule 37)

    "THEN"	shift, and go to state 119



state 99

    switchStatement  ->  "SWITCH" "(" expression ")" . caseStatements defaultStatement "ENDSWITCH"   (rule 41)

    "CASE"	shift, and go to state 120

    caseStatements	go to state 121
    caseStatement	go to state 122



state 100

    printStatement  ->  "PRINT" "(" "string" ")" .   (rule 30)

    $default	reduce using rule 30 (printStatement)



state 101

    printStatement  ->  "PRINT" "(" "string" "[" . "," variable "]" ")"   (rule 29)

    "," 	shift, and go to state 123



state 102

    functionCall  ->  "identifier" "(" argumentList ")" .   (rule 17)

    $default	reduce using rule 17 (functionCall)



state 103

    argumentList  ->  argument "," . argumentList   (rule 14)

    "identifier"	shift, and go to state 52
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    argumentList	go to state 124
    argument	go to state 76
    type	go to state 77
    array	go to state 28
    variable	go to state 78



state 104

    array  ->  "identifier" "[" "natural" "]" .   (rule 70)

    $default	reduce using rule 70 (array)



state 105

    assignStatement  ->  variable " =" expression ";" .   (rule 28)

    $default	reduce using rule 28 (assignStatement)



state 106

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements . "RETURN" "identifier" "END_FUNCTION"   (rule 6)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements . "RETURN" "natural" "END_FUNCTION"   (rule 7)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements . "RETURN" "string" "END_FUNCTION"   (rule 8)

    "RETURN"	shift, and go to state 125



state 107

    parameterDeclarations  ->  parameter "," parameterDeclarations .   (rule 9)

    $default	reduce using rule 9 (parameterDeclarations)



state 108

    variables  ->  variables . "," variables   (rule 74)
    variables  ->  variables "," variables .   (rule 74)


    $default	reduce using rule 74 (variables)



state 109

    input  ->  "(" expression ")" .   (rule 64)

    $default	reduce using rule 64 (input)



state 110

    whileStatement  ->  "WHILE" "(" expression ")" statements . "ENDWHILE"   (rule 35)

    "ENDWHILE"	shift, and go to state 126



state 111

    expression  ->  andExpression "OR" expression .   (rule 48)

    $default	reduce using rule 48 (expression)



state 112

    andExpression  ->  comparison "AND" andExpression .   (rule 50)

    $default	reduce using rule 50 (andExpression)



state 113

    comparison  ->  addition "== or !=" comparison .   (rule 53)

    $default	reduce using rule 53 (comparison)



state 114

    comparison  ->  addition "< or >" comparison .   (rule 52)

    $default	reduce using rule 52 (comparison)



state 115

    addition  ->  multiplication "+ or -" addition .   (rule 55)

    $default	reduce using rule 55 (addition)



state 116

    multiplication  ->  negation "* or /" multiplication .   (rule 57)

    $default	reduce using rule 57 (multiplication)



state 117

    power  ->  input "^" power .   (rule 61)

    $default	reduce using rule 61 (power)



state 118

    forStatement  ->  "FOR" "identifier" " =" expression "TO" . expression "STEP" expression statements "ENDFOR"   (rule 36)

    "+ or -"	shift, and go to state 55
    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    expression	go to state 127
    andExpression	go to state 62
    comparison	go to state 63
    addition	go to state 64
    multiplication	go to state 65
    negation	go to state 66
    power	go to state 67
    input	go to state 68
    type	go to state 69



state 119

    ifStatement  ->  "IF" "(" expression ")" "THEN" . statements elseifStatements "ENDIF"   (rule 37)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    functionCall	go to state 17
    statements	go to state 128
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 120

    caseStatement  ->  "CASE" . "(" expression ")" ":" statements   (rule 44)

    "(" 	shift, and go to state 129



state 121

    switchStatement  ->  "SWITCH" "(" expression ")" caseStatements . defaultStatement "ENDSWITCH"   (rule 41)

    "DEFAULT"	shift, and go to state 130

    $default	reduce using rule 46 (defaultStatement)

    defaultStatement	go to state 131



state 122

    caseStatements  ->  caseStatement .   (rule 42)
    caseStatements  ->  caseStatement . caseStatements   (rule 43)

    "CASE"	shift, and go to state 120

    $default	reduce using rule 42 (caseStatements)

    caseStatements	go to state 132
    caseStatement	go to state 122



state 123

    printStatement  ->  "PRINT" "(" "string" "[" "," . variable "]" ")"   (rule 29)

    "identifier"	shift, and go to state 52

    array	go to state 28
    variable	go to state 133



state 124

    argumentList  ->  argument "," argumentList .   (rule 14)

    $default	reduce using rule 14 (argumentList)



state 125

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" . "identifier" "END_FUNCTION"   (rule 6)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" . "natural" "END_FUNCTION"   (rule 7)
    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" . "string" "END_FUNCTION"   (rule 8)

    "identifier"	shift, and go to state 134
    "natural"	shift, and go to state 135
    "string"	shift, and go to state 136



state 126

    whileStatement  ->  "WHILE" "(" expression ")" statements "ENDWHILE" .   (rule 35)

    $default	reduce using rule 35 (whileStatement)



state 127

    forStatement  ->  "FOR" "identifier" " =" expression "TO" expression . "STEP" expression statements "ENDFOR"   (rule 36)

    "STEP"	shift, and go to state 137



state 128

    ifStatement  ->  "IF" "(" expression ")" "THEN" statements . elseifStatements "ENDIF"   (rule 37)

    "ELSEIF"	shift, and go to state 138
    "ELSE"	shift, and go to state 139

    $default	reduce using rule 40 (elseifStatements)

    elseifStatements	go to state 140



state 129

    caseStatement  ->  "CASE" "(" . expression ")" ":" statements   (rule 44)

    "+ or -"	shift, and go to state 55
    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    expression	go to state 141
    andExpression	go to state 62
    comparison	go to state 63
    addition	go to state 64
    multiplication	go to state 65
    negation	go to state 66
    power	go to state 67
    input	go to state 68
    type	go to state 69



state 130

    defaultStatement  ->  "DEFAULT" . ":" statements   (rule 45)

    ":" 	shift, and go to state 142



state 131

    switchStatement  ->  "SWITCH" "(" expression ")" caseStatements defaultStatement . "ENDSWITCH"   (rule 41)

    "ENDSWITCH"	shift, and go to state 143



state 132

    caseStatements  ->  caseStatement caseStatements .   (rule 43)

    $default	reduce using rule 43 (caseStatements)



state 133

    printStatement  ->  "PRINT" "(" "string" "[" "," variable . "]" ")"   (rule 29)

    "]" 	shift, and go to state 144



state 134

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "identifier" . "END_FUNCTION"   (rule 6)

    "END_FUNCTION"	shift, and go to state 145



state 135

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "natural" . "END_FUNCTION"   (rule 7)

    "END_FUNCTION"	shift, and go to state 146



state 136

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "string" . "END_FUNCTION"   (rule 8)

    "END_FUNCTION"	shift, and go to state 147



state 137

    forStatement  ->  "FOR" "identifier" " =" expression "TO" expression "STEP" . expression statements "ENDFOR"   (rule 36)

    "+ or -"	shift, and go to state 55
    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    expression	go to state 148
    andExpression	go to state 62
    comparison	go to state 63
    addition	go to state 64
    multiplication	go to state 65
    negation	go to state 66
    power	go to state 67
    input	go to state 68
    type	go to state 69



state 138

    elseifStatements  ->  "ELSEIF" . "(" expression ")" "THEN" statements elseifStatements   (rule 38)

    "(" 	shift, and go to state 149



state 139

    elseifStatements  ->  "ELSE" . statements   (rule 39)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    functionCall	go to state 17
    statements	go to state 150
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 140

    ifStatement  ->  "IF" "(" expression ")" "THEN" statements elseifStatements . "ENDIF"   (rule 37)

    "ENDIF"	shift, and go to state 151



state 141

    caseStatement  ->  "CASE" "(" expression . ")" ":" statements   (rule 44)

    ")" 	shift, and go to state 152



state 142

    defaultStatement  ->  "DEFAULT" ":" . statements   (rule 45)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    functionCall	go to state 17
    statements	go to state 153
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 143

    switchStatement  ->  "SWITCH" "(" expression ")" caseStatements defaultStatement "ENDSWITCH" .   (rule 41)

    $default	reduce using rule 41 (switchStatement)



state 144

    printStatement  ->  "PRINT" "(" "string" "[" "," variable "]" . ")"   (rule 29)

    ")" 	shift, and go to state 154



state 145

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "identifier" "END_FUNCTION" .   (rule 6)

    $default	reduce using rule 6 (functionDeclaration)



state 146

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "natural" "END_FUNCTION" .   (rule 7)

    $default	reduce using rule 7 (functionDeclaration)



state 147

    functionDeclaration  ->  "FUNCTION" "identifier" "(" parameterDeclarations ")" statements "RETURN" "string" "END_FUNCTION" .   (rule 8)

    $default	reduce using rule 8 (functionDeclaration)



state 148

    forStatement  ->  "FOR" "identifier" " =" expression "TO" expression "STEP" expression . statements "ENDFOR"   (rule 36)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    functionCall	go to state 17
    statements	go to state 155
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 149

    elseifStatements  ->  "ELSEIF" "(" . expression ")" "THEN" statements elseifStatements   (rule 38)

    "+ or -"	shift, and go to state 55
    "(" 	shift, and go to state 56
    "identifier"	shift, and go to state 57
    "natural"	shift, and go to state 58
    "string"	shift, and go to state 59

    functionCall	go to state 60
    expression	go to state 156
    andExpression	go to state 62
    comparison	go to state 63
    addition	go to state 64
    multiplication	go to state 65
    negation	go to state 66
    power	go to state 67
    input	go to state 68
    type	go to state 69



state 150

    elseifStatements  ->  "ELSE" statements .   (rule 39)

    $default	reduce using rule 39 (elseifStatements)



state 151

    ifStatement  ->  "IF" "(" expression ")" "THEN" statements elseifStatements "ENDIF" .   (rule 37)

    $default	reduce using rule 37 (ifStatement)



state 152

    caseStatement  ->  "CASE" "(" expression ")" . ":" statements   (rule 44)

    ":" 	shift, and go to state 157



state 153

    defaultStatement  ->  "DEFAULT" ":" statements .   (rule 45)

    $default	reduce using rule 45 (defaultStatement)



state 154

    printStatement  ->  "PRINT" "(" "string" "[" "," variable "]" ")" .   (rule 29)

    $default	reduce using rule 29 (printStatement)



state 155

    forStatement  ->  "FOR" "identifier" " =" expression "TO" expression "STEP" expression statements . "ENDFOR"   (rule 36)

    "ENDFOR"	shift, and go to state 158



state 156

    elseifStatements  ->  "ELSEIF" "(" expression . ")" "THEN" statements elseifStatements   (rule 38)

    ")" 	shift, and go to state 159



state 157

    caseStatement  ->  "CASE" "(" expression ")" ":" . statements   (rule 44)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    functionCall	go to state 17
    statements	go to state 160
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 158

    forStatement  ->  "FOR" "identifier" " =" expression "TO" expression "STEP" expression statements "ENDFOR" .   (rule 36)

    $default	reduce using rule 36 (forStatement)



state 159

    elseifStatements  ->  "ELSEIF" "(" expression ")" . "THEN" statements elseifStatements   (rule 38)

    "THEN"	shift, and go to state 161



state 160

    caseStatement  ->  "CASE" "(" expression ")" ":" statements .   (rule 44)

    $default	reduce using rule 44 (caseStatement)



state 161

    elseifStatements  ->  "ELSEIF" "(" expression ")" "THEN" . statements elseifStatements   (rule 38)

    "VARS"	shift, and go to state 9
    "WHILE"	shift, and go to state 10
    "FOR"	shift, and go to state 11
    "IF"	shift, and go to state 12
    "SWITCH"	shift, and go to state 13
    "PRINT"	shift, and go to state 14
    "BREAK"	shift, and go to state 15
    "identifier"	shift, and go to state 16

    functionCall	go to state 17
    statements	go to state 162
    statement	go to state 19
    simpleStatement	go to state 20
    assignStatement	go to state 21
    printStatement	go to state 22
    nestedStatement	go to state 23
    whileStatement	go to state 24
    forStatement	go to state 25
    ifStatement	go to state 26
    switchStatement	go to state 27
    array	go to state 28
    variable	go to state 29
    varDeclaration	go to state 30



state 162

    elseifStatements  ->  "ELSEIF" "(" expression ")" "THEN" statements . elseifStatements   (rule 38)

    "ELSEIF"	shift, and go to state 138
    "ELSE"	shift, and go to state 139

    $default	reduce using rule 40 (elseifStatements)

    elseifStatements	go to state 163



state 163

    elseifStatements  ->  "ELSEIF" "(" expression ")" "THEN" statements elseifStatements .   (rule 38)

    $default	reduce using rule 38 (elseifStatements)



state 164

    $   	go to state 165



state 165

    $   	go to state 166



state 166

    $default	accept
